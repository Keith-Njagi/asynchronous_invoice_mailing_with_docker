import os
import time

import pdfkit
from flask import Flask, render_template
from flask_sqlalchemy import SQLAlchemy
from flask_mail import Mail, Message
from pyvirtualdisplay import Display

from flask_celery import make_celery


app = Flask(__name__)

app.config['CELERY_BROKER_URL'] = os.getenv('CELERY_BROKER_URL')
app.config['CELERY_RESULT_BACKEND'] = os.getenv('CELERY_RESULT_BACKEND')
app.config['SQLALCHEMY_DATABASE_URI'] =  os.getenv('SQLALCHEMY_DATABASE_URI')
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False
app.config['MAIL_SERVER'] =  os.getenv('MAIL_SERVER')
app.config['MAIL_PORT'] = int(os.getenv('MAIL_PORT'))
app.config['MAIL_USE_SSL'] = True
app.config['MAIL_USERNAME'] =  os.getenv('MAIL_USERNAME')
app.config['MAIL_PASSWORD'] =  os.getenv('MAIL_PASSWORD')



celery = make_celery(app)
db = SQLAlchemy(app)
mail = Mail(app)

class User(db.Model):
    __tablename__ = 'users'
    id = db.Column(db.Integer, primary_key=True)
    username =db.Column(db.String(30), unique=True)
    email =db.Column(db.String(80))

@app.before_first_request
def create_tables():
    db.create_all()

person = {
            'user_id':'1',
            'currency': 'Ksh',
            'amount_paid': 100.00,
            'amount_due': 900.00 
        }

title = 'Invoice 001'



@celery.task(name='celery_mail_pdf.send') # @celery.task(name='celery_mail_pdf.send')
def send(user, is_retry=False):
    db_user = User.query.filter_by(username=user).first()
    if db_user:
        try:
            template = render_template('pdf_template.html',user=db_user, person=person, title=title)
            pdf = pdfkit.from_string(template, False)
            mail_sender = os.getenv('MAIL_USERNAME')
            msg = Message('Autogenerated Invoice', sender=mail_sender, recipients=[db_user.email]) #sender='keithnjagicodingtrials@gmail.com'
            msg.attach('result.pdf', 'application/pdf', pdf)
            time.sleep(2)
            mail.send(msg)
            return 'Mail sent successfully.'
        except Exception as e:
            print('==================================')
            print(f'Error: {e}')
            print('==================================')
            time.sleep(60) # Wait for a while, 1 minute tends to be a good measure as most configurations specify how many requests can be made a minute. 
            if not is_retry:  # Only retry once -> you could modify this to make the use of a counter.
                print('*****Attempting to send mail again...*****')
                send(user, is_retry=True) # Try again
        
        
from app.views import *

if __name__ == '__main__':
    # app.run(debug=True, host='0.0.0.0', port=5000)
    app.run()